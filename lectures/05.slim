---
layout: lecture
title: Enumerable in Action
---

section.center data-background="#000"
  h1.white Enumerable in Action

section
  h2 Enumerable
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      class Count
        include Enumerable

        def initialize(count)
          @count = count
        end

        def each
          @count.times { |iteration| yield iteration }
        end
      end

section
  h2 Enumerable
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      counter = Counter.new(5)
      counter.each { |time| puts time }

section
  h2 Enumerable
  p Top-level constants that are Enumerable
  p.fragment Array, Hash, Struct, Range, IO, File, Dir, Enumerator, StringIO

section
  h2 Enumerable
  p Top-level constants that are Enumerable
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      Object.constants.map { |sym| Object.const_get sym }

section
  h2 Enumerable
  p Top-level constants that are Enumerable
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      Object.constants.map { |sym| Object.const_get sym }.select { |const|
        const.is_a? Module and const.ancestors.include? Enumerable
      }

section.center data-background="#000"
  p.white Array

section
  h2 Array
  p A mutable collection, backed by an actual array

section
  h2 Array#[]
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = []
      => []

      >> array[0] == nil
      => true

section
  h2 Array#[]
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = [1, 2]
      => [1, 2]

      >> array[0]  == 1
      => true

      >> array[-1] == 2
      => true

section
  h2 Array#[]=
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = []
      => []

      >> array[2] = 3
      => 3

      >> array
      => [nil, nil, 3]

section
  h2 Array#first
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = [1, 2]
      => [1, 2]

      >> array.first == array[0] == 1
      => true

section
  h2 Array#last
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = [1, 2, 3]
      => [1, 2, 3]

      >> array.last == array[-1] == 3
      => true

section
  h2 Array#uniq
  p Selects only the unique elements
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = [1, 2, 3, 3, 2, 1]
      => [1, 2, 3, 3, 2, 1]

      >> array.uniq
      => [1 2, 3]

section
  h2 Array#compact
  p Selects only the non-nil elements
  pre(contenteditable=true): code.ruby contenteditable=true
    '
      >> array = [0, "", false, nil]
      => [0, "", false, nil]

      >> array.compact
      => [0, false ""]

section.center data-background="#000"
  p.white Hash

section
  h2 Hash
  p Hashes are used to store key, value pairs

section
  h2 Hash
  p Looking up a key happens in constant time

section
  h2 Hash
  p Which basically means its fast :)

section
  h2 Hash
  p Uses the same literal as the block, kinda
  pre(contenteditable=true): code.ruby
    '
      { 'key' => :value, [] => {}, Object.new => Enumerable }

section
  h2 Hash
  p This creates problems if the first argument of a method is a hash
  pre(contenteditable=true): code.ruby
    '
      assert_equal {one: 1, two: 2}, [[:one, 1], [:two, 2]].to_hash
      syntax error, unexpected ':', expecting '}' (SyntaxError)
         assert_equal {one: 1, two: 2}, [[:one, 1], [:two, 2]].to_hash

section
  h2 Hash
  p They can store any value as a key or value
  pre(contenteditable=true): code.ruby
    '
      { 'key' => :value, [] => {}, Object.new => Enumerable }

section
  h2 Hash
  p Shortcut syntax for symbol keys
  pre(contenteditable=true): code.ruby
    '
      { symbol_as_key: 42 }

section
  h2 Hash#[]
  p By default the missing keys are nil
  pre(contenteditable=true): code.ruby
    '
      >> hash = {}
      => {}

      >> hash[:missing_key] == nil
      => true

section
  h2 Hash#[]=
  pre(contenteditable=true): code.ruby
    '
      >> hash = {}
      => {}

      >> hash[:new_key] == 42
      => 42

      >> hash
      => {:new_key=>42}

section
  h2 Hash.new
  p We can specify default value on inexistent key with Hash.new
  pre(contenteditable=true): code.ruby
    '
      h = Hash.new("Go Fish")
      h["a"] = 100
      h["b"] = 200
      h["a"]           #=> 100
      h["c"]           #=> "Go Fish"

      # The following alters the single default object
      h["c"].upcase!   #=> "GO FISH"
      h["d"]           #=> "GO FISH"

section
  h2 Hash.new
  p Can work with blocks too
  pre(contenteditable=true): code.ruby
    '
      # While this creates a new default object each time
      h = Hash.new { |hash, key| hash[key] = "Go Fish: " + key.to_s }
      h["c"]           #=> "Go Fish: c"
      h["c"].upcase!   #=> "GO FISH: C"
      h["d"]           #=> "Go Fish: d"
      h.keys           #=> ["c", "d"]

section.center data-background="#000"
  p.white No method is special enough not to accept a block

section
  h2 Hash.fetch
  p The better Hash#[]
  pre(contenteditable=true): code.ruby
    '
      h = { "a" => 100, "b" => 200 }
      h.fetch("a")                            #=> 100
      h.fetch("z", "go fish")                 #=> "go fish"
      h.fetch("z") { |el| "go fish, \#{el}"}  #=> "go fish, z"

section
  h2 Hash#fetch
  p The better Hash#[]
  pre(contenteditable=true): code.ruby
    '
      h = { "a" => 100, "b" => 200 }
      h.fetch("z")                            #=> prog.rb:2:in `fetch': key not found (KeyError)

section
  h2 Hash#has_key?
  p Whether a key is present in the hash
  pre(contenteditable=true): code.ruby
    '
      h = { "a" => 100, "b" => 200 }
      h.has_key?("a")   #=> true
      h.has_key?("z")   #=> false

section
  h2 Hash#has_value?
  p Whether a value is present in the hash
  pre(contenteditable=true): code.ruby
    '
      h = { "a" => 100, "b" => 200 }
      h.has_value?(100)   #=> true
      h.has_value?(999)   #=> false

section
  h2 Hash#include?
  p Comes from Enumerable, but its overridden for speed

section
  h2 Hash#merge
  p Creates a new hash containing the contents of the current one and the argument of merge
  pre(contenteditable=true): code.ruby
    '
      h1 = { "a" => 100, "b" => 200 }
      h2 = { "b" => 254, "c" => 300 }

      h1.merge(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}
      h1.merge(h2) { |key, oldval, newval| newval - oldval }

                     #=> {"a"=>100, "b"=>54,  "c"=>300}
      h1             #=> {"a"=>100, "b"=>200}

section
  h2 Hash#merge
  p You're gonna use this a lot
  pre(contenteditable=true): code.ruby
    '
      h1 = { "a" => 100, "b" => 200 }
      h2 = { "b" => 254, "c" => 300 }

      h1.merge(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}
      h1.merge(h2) { |key, oldval, newval| newval - oldval }

                     #=> {"a"=>100, "b"=>54,  "c"=>300}
      h1             #=> {"a"=>100, "b"=>200}

section
  h2 Hash#merge!
  p The same as Hash#merge, but does its work in-place
  pre(contenteditable=true): code.ruby
    '
      h1 = { "a" => 100, "b" => 200 }
      h2 = { "b" => 254, "c" => 300 }
      h1.merge!(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}

      h1 = { "a" => 100, "b" => 200 }
      h2 = { "b" => 254, "c" => 300 }
      h1.merge!(h2) { |key, v1, v2| v1 }
                      #=> {"a"=>100, "b"=>200, "c"=>300}

section
  h2 Hash#merge!
  p Accepts a block to customize the merging behaviour
  pre(contenteditable=true): code.ruby
    '
      h1 = { "a" => 100, "b" => 200 }
      h2 = { "b" => 254, "c" => 300 }
      h1.merge!(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}

      h1 = { "a" => 100, "b" => 200 }
      h2 = { "b" => 254, "c" => 300 }
      h1.merge!(h2) { |key, v1, v2| v1 }
                      #=> {"a"=>100, "b"=>200, "c"=>300}


section
  h2 Hash#each_key
  p Iterates over each key
  pre(contenteditable=true): code.ruby
    '
      { "a" => 100, "b" => 200 }.each_key { |key| puts key }

section
  h2 Hash#each_value
  p Iterates over each value
  pre(contenteditable=true): code.ruby
    '
      { "a" => 100, "b" => 200 }.each_value { |value| puts value }

section
  h2 Hash#each_pair
  p Iterates over each pair
  pre(contenteditable=true): code.ruby
    '
      { "a" => 100, "b" => 200 }.each_pair { |key, value| p key, value }

section
  h2 Hash#map
  p Because its Enumerable, it has map

section
  h2 Hash#map
  p It returns an Array, be aware of that

section.center
  p A good <a href="http://phrogz.net/programmingruby/tut_containers.html#blocksanditerators">read</a> for blocks and iterators in Ruby

